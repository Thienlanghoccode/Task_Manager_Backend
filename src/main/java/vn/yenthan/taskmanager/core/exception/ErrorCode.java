package vn.yenthan.taskmanager.core.exception;

import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.http.HttpStatus;
import vn.yenthan.taskmanager.util.MessageKeys;

@Getter
@AllArgsConstructor
public enum ErrorCode {

    // --- SYSTEM (1000-1999)
    SYSTEM_INTERNAL_ERROR(1000, MessageKeys.SYSTEM_INTERNAL_ERROR, HttpStatus.INTERNAL_SERVER_ERROR),
    SYSTEM_DATABASE_ERROR(1001, MessageKeys.SYSTEM_DATABASE_ERROR, HttpStatus.INTERNAL_SERVER_ERROR),
    SYSTEM_VALIDATION_FAILED(1002, MessageKeys.SYSTEM_VALIDATION_FAILED, HttpStatus.BAD_REQUEST),
    SYSTEM_METHOD_NOT_ALLOWED(1003, MessageKeys.SYSTEM_METHOD_NOT_ALLOWED, HttpStatus.METHOD_NOT_ALLOWED),
    SYSTEM_NOT_FOUND(1004, MessageKeys.SYSTEM_NOT_FOUND, HttpStatus.NOT_FOUND),

    // --- AUTH / SECURITY (2000-2999)
    AUTH_UNAUTHENTICATED(2000, MessageKeys.AUTH_UNAUTHENTICATED, HttpStatus.UNAUTHORIZED),
    AUTH_UNAUTHORIZED(2001, MessageKeys.AUTH_UNAUTHORIZED, HttpStatus.FORBIDDEN),
    AUTH_INVALID_TOKEN(2002, MessageKeys.AUTH_INVALID_TOKEN, HttpStatus.UNAUTHORIZED),
    AUTH_INVALID_DEVICE_ID(2003, MessageKeys.AUTH_INVALID_DEVICE_ID, HttpStatus.UNAUTHORIZED),
    AUTH_INVALID_CREDENTIALS(2004, MessageKeys.AUTH_INVALID_CREDENTIALS, HttpStatus.UNAUTHORIZED),
    AUTH_ACCOUNT_LOCKED(2005, MessageKeys.AUTH_ACCOUNT_LOCKED, HttpStatus.FORBIDDEN),
    AUTH_ACCOUNT_UNVERIFIED(2006, MessageKeys.AUTH_ACCOUNT_UNVERIFIED, HttpStatus.FORBIDDEN),
    AUTH_LOGIN_SUCCESS(2007, MessageKeys.AUTH_LOGIN_SUCCESS, HttpStatus.OK),
    AUTH_LOGOUT_SUCCESS(2008, MessageKeys.AUTH_LOGOUT_SUCCESS, HttpStatus.OK),
    AUTH_REGISTER_SUCCESS(2009, MessageKeys.AUTH_REGISTER_SUCCESS, HttpStatus.CREATED),
    AUTH_REFRESH_SUCCESS(2010, MessageKeys.AUTH_REFRESH_SUCCESS, HttpStatus.OK),

    // --- VALIDATION (3000-3999)
    USER_NOT_FOUND(3000, MessageKeys.USER_NOT_FOUND, HttpStatus.NOT_FOUND),
    USERNAME_REQUIRED(3001, MessageKeys.USERNAME_REQUIRED, HttpStatus.BAD_REQUEST),
    USERNAME_SIZE(3002, MessageKeys.USERNAME_SIZE, HttpStatus.BAD_REQUEST),
    USERNAME_PATTERN(3003, MessageKeys.USERNAME_PATTERN, HttpStatus.BAD_REQUEST),
    USERNAME_ALREADY_EXISTS(3004, MessageKeys.USERNAME_ALREADY_EXISTS, HttpStatus.BAD_REQUEST),
    EMAIL_ALREADY_EXISTS(3005, MessageKeys.EMAIL_ALREADY_EXISTS, HttpStatus.BAD_REQUEST),
    EMAIL_INVALID(3006, MessageKeys.EMAIL_INVALID, HttpStatus.BAD_REQUEST),
    PASSWORD_REQUIRED(3007, MessageKeys.PASSWORD_REQUIRED, HttpStatus.BAD_REQUEST),
    PASSWORD_NO_SPACE(3008, MessageKeys.PASSWORD_NO_SPACE, HttpStatus.BAD_REQUEST),
    PASSWORD_INVALID(3009, MessageKeys.PASSWORD_INVALID, HttpStatus.BAD_REQUEST);

    private final int code;
    private final String message;
    private final HttpStatus httpStatus;
}
